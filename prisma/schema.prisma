// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  phone         String?
  bio           String?
  location      String?
  isSteward      Boolean   @default(false)
  isVerified    Boolean   @default(false)
  rating        Float     @default(0)
  totalReviews  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  stewardProfile    StewardProfile?
  servicesOffered  Service[]
  bookingsAsClient Booking[]      @relation("ClientBookings")
  bookingsAsSteward Booking[]      @relation("StewardBookings")
  reviewsGiven     Review[]       @relation("ReviewsGiven")
  reviewsReceived  Review[]       @relation("ReviewsReceived")
  messages         Message[]
  notifications    Notification[]
  payments         Payment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StewardProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  hourlyRate       Float
  availability     Json // Store availability schedule
  skills           String[]
  experience       String?
  portfolio        String[] // Array of image URLs
  backgroundCheck  Boolean  @default(false)
  insuranceVerified Boolean @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  icon        String?
  slug        String    @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  services Service[]
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  duration    Int // Duration in minutes
  categoryId  String
  stewardId    String
  isActive    Boolean  @default(true)
  images      String[] // Array of image URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category  @relation(fields: [categoryId], references: [id])
  steward   User      @relation(fields: [stewardId], references: [id])
  bookings Booking[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

model Booking {
  id              String        @id @default(cuid())
  clientId        String
  stewardId        String
  serviceId       String
  scheduledDate   DateTime
  scheduledTime   String
  duration        Int // Duration in minutes
  totalPrice      Float
  status          BookingStatus @default(PENDING)
  address         String
  notes           String?
  completedAt     DateTime?
  cancelledAt     DateTime?
  cancellationReason String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  client   User      @relation("ClientBookings", fields: [clientId], references: [id])
  steward   User      @relation("StewardBookings", fields: [stewardId], references: [id])
  service  Service   @relation(fields: [serviceId], references: [id])
  messages Message[]
  payment  Payment?
  review   Review?
}

model Message {
  id        String   @id @default(cuid())
  bookingId String
  senderId  String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  sender  User    @relation(fields: [senderId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  reviewerId String
  revieweeId String
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booking  Booking @relation(fields: [bookingId], references: [id])
  reviewer User    @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewee User    @relation("ReviewsReceived", fields: [revieweeId], references: [id])
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String        @unique
  userId          String
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?
  refundAmount    Float?
  refundedAt      DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

enum NotificationType {
  BOOKING_REQUEST
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  BOOKING_COMPLETED
  MESSAGE_RECEIVED
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  SYSTEM_UPDATE
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json? // Additional data for the notification
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}